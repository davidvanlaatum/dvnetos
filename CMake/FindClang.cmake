file(GLOB LLVM_BIN_DIRS /usr/lib/llvm-*/bin)
list(APPEND LLVM_BIN_DIRS /opt/homebrew/opt/llvm/bin)
file(GLOB BREW_LLVM_BIN_DIRS /opt/homebrew/opt/llvm@*/bin)
list(APPEND LLVM_BIN_DIRS ${BREW_LLVM_BIN_DIRS})
message(DEBUG "LLVM_BIN_DIRS: ${LLVM_BIN_DIRS}")
function(extractClangVersion VAR PATH)
  file(TIMESTAMP ${PATH} FILE_MTIME "%s" UTC)
  if (NOT ${PATH}_VENDOR OR NOT ${PATH}_VERSION OR NOT ${PATH}_FULL_VERSION OR NOT ${PATH}_MAJOR OR NOT ${PATH}_MINOR OR NOT ${PATH}_PATCH OR NOT FILE_MTIME EQUAL ${PATH}_MTIME)
    execute_process(
        COMMAND ${PATH} --version
        OUTPUT_VARIABLE OUT
        OUTPUT_STRIP_TRAILING_WHITESPACE
        TIMEOUT 10
        RESULT_VARIABLE RES
    )
    if (NOT RES EQUAL 0)
      message(WARNING "Could not determine version of ${PATH} result is ${RES}")
      return()
    endif ()
    string(REGEX MATCH "([a-zA-Z]+) ([a-zA-Z0-9-]+)( version|) ([0-9]+\\.[0-9]+\\.[0-9]+)" FULL_VERSION ${OUT})
    if (CMAKE_MATCH_4)
      set(VERSION ${CMAKE_MATCH_4})
      string(TOLOWER ${CMAKE_MATCH_1} VENDOR)
      set(${PATH}_VENDOR ${VENDOR} CACHE INTERNAL "" FORCE)
      set(${PATH}_VERSION ${VERSION} CACHE INTERNAL "" FORCE)
      set(${PATH}_FULL_VERSION ${FULL_VERSION} CACHE INTERNAL "" FORCE)
      message(DEBUG "Found ${VENDOR} ${CMAKE_MATCH_2} version ${VERSION} at ${PATH}")
      string(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9]+)" VERSION ${VERSION})
      set(${PATH}_MAJOR ${CMAKE_MATCH_1} CACHE INTERNAL "" FORCE)
      set(${PATH}_MINOR ${CMAKE_MATCH_2} CACHE INTERNAL "" FORCE)
      set(${PATH}_PATCH ${CMAKE_MATCH_3} CACHE INTERNAL "" FORCE)
      set(${PATH}_MTIME ${FILE_MTIME} CACHE INTERNAL "" FORCE)
    else ()
      message(WARNING "Could not determine version of ${PATH}\n${OUT}")
      return()
    endif ()
  endif ()
  set(${VAR}_VENDOR ${${PATH}_VENDOR} PARENT_SCOPE)
  set(${VAR}_VERSION ${${PATH}_VERSION} PARENT_SCOPE)
  set(${VAR}_FULL_VERSION ${${PATH}_FULL_VERSION} PARENT_SCOPE)
  set(${VAR}_MAJOR ${${PATH}_MAJOR} PARENT_SCOPE)
  set(${VAR}_MINOR ${${PATH}_MINOR} PARENT_SCOPE)
  set(${VAR}_PATCH ${${PATH}_PATCH} PARENT_SCOPE)
endfunction()

function(findMaxClangVersion RES PATH)
  set(${RES} false PARENT_SCOPE)
  extractClangVersion(EXE ${PATH})
  string(TOLOWER ${EXE_VENDOR} EXE_VENDOR)
  message(DEBUG "Checking ${EXE_VENDOR} version ${EXE_VERSION} against ${CLANG_HIGHEST_VERSION}")
  if (NOT EXE_VENDOR STREQUAL "apple")
    if (EXE_VERSION VERSION_GREATER ${CLANG_HIGHEST_VERSION})
      set(CLANG_HIGHEST_VERSION ${EXE_VERSION} CACHE INTERNAL "" FORCE)
    endif ()
  endif ()
endfunction()

if (NOT CLANG)
  set(CLANG_HIGHEST_VERSION 0 CACHE INTERNAL "" FORCE)
  find_program(CLANG_MAX_VERSION NAMES clang NO_CACHE HINTS ${LLVM_BIN_DIRS} VALIDATOR findMaxClangVersion)
  unset(CLANG_HIGHEST_VERSION)
  message(DEBUG "Highest Clang version found is ${CLANG_HIGHEST_VERSION}")
endif ()
function(clangVersionValidator RES PATH)
  extractClangVersion(EXE ${PATH})
  string(TOLOWER ${EXE_VENDOR} EXE_VENDOR)
  if (NOT EXE_VENDOR STREQUAL "apple")
    if (NOT CLANG_HIGHEST_VERSION OR EXE_VERSION VERSION_GREATER_EQUAL "${CLANG_HIGHEST_VERSION}")
      set(${RES} true PARENT_SCOPE)
      return()
    else ()
      message(DEBUG "${CLANG_HIGHEST_VERSION} unset or ${EXE_VERSION} not greater than or equal to ${CLANG_HIGHEST_VERSION}")
    endif ()
  else ()
    message(DEBUG "Apple Clang detected")
  endif ()
  set(${RES} false PARENT_SCOPE)
endfunction()
function(printVersionIfFound NAME PATH)
  if (PATH)
    extractClangVersion(EXE ${PATH})
    if (EXE_VERSION)
      message(STATUS "Found ${EXE_VENDOR} ${NAME} version ${EXE_VERSION} at ${PATH}")
    endif ()
  else ()
    message(STATUS "Could not find ${NAME}")
  endif ()
endfunction()
find_program(CLANG NAMES clang REQUIRED HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(clang ${CLANG})
find_program(CLANGPP NAMES clang++ REQUIRED HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(clang++ ${CLANGPP})
find_program(CLANG_LD NAMES ld.lld REQUIRED HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(ld.lld ${CLANG_LD})
find_program(CLANG_FORMAT NAMES clang-format HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(clang-format ${CLANG_FORMAT})
find_program(CLANG_TIDY names clang-tidy HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(clang-tidy ${CLANG_TIDY})
find_program(LLVM_PROFDATA NAMES llvm-profdata HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(llvm-profdata ${LLVM_PROFDATA})
find_program(LLVM_COV NAMES llvm-cov HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(llvm-cov ${LLVM_COV})
find_program(CLANG_SCAN_DEPS NAMES clang-scan-deps HINTS ${LLVM_BIN_DIRS} VALIDATOR clangVersionValidator)
printVersionIfFound(clang-scan-deps ${CLANG_SCAN_DEPS})
