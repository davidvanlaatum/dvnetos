set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON CACHE INTERNAL "" FORCE)
cmake_minimum_required(VERSION 3.28)
include(CMakePrintHelpers)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMake)
include(arch-alias)
set(TEST_MODE OFF CACHE BOOL "Enable test mode")
if (NOT TEST_MODE)
  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
  if (NOT DEFINED ARCH)
    set(ARCH "" CACHE STRING "Target architecture (x86_64 or aarch64)")
    if (NOT ARCH)
      message(FATAL_ERROR "ARCH is not defined. Please specify -DARCH=x86_64 or -DARCH=aarch64 when running CMake.")
    endif ()
  endif ()
endif ()
set(USE_CLANG ON CACHE BOOL "Use Clang as the compiler")
if (USE_CLANG)
  file(GLOB LLVM_BIN_DIRS /usr/lib/llvm-*/bin)
  list(APPEND LLVM_BIN_DIRS /opt/homebrew/opt/llvm/bin)
  find_program(CLANG NAMES clang REQUIRED HINTS ${LLVM_BIN_DIRS})
  find_program(CLANGPP NAMES clang++ REQUIRED HINTS ${LLVM_BIN_DIRS})
  find_program(CLANG_LD NAMES ld.lld REQUIRED HINTS ${LLVM_BIN_DIRS})
  find_program(CLANG_TIDY names clang-tidy HINTS ${LLVM_BIN_DIRS})
  if (CLANG_TIDY)
    set(CMAKE_C_CLANG_TIDY ${CLANG_TIDY})
    set(CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY})
  endif ()
  find_program(CLANG_SCAN_DEPS NAMES clang-scan-deps HINTS ${LLVM_BIN_DIRS})
  if (CLANG_SCAN_DEPS)
    set(CMAKE_C_COMPILER_CLANG_SCAN_DEPS ${CLANG_SCAN_DEPS})
    set(CMAKE_CXX_COMPILER_CLANG_SCAN_DEPS ${CLANG_SCAN_DEPS})
  endif ()
endif ()
if (NOT TEST_MODE)
  set(CMAKE_SYSTEM_NAME Generic)
  handleArchAlias(ARCH)
  if (ARCH STREQUAL "x86_64")
    set(CMAKE_SYSTEM_PROCESSOR x86_64)
  elseif (ARCH STREQUAL "aarch64")
    set(CMAKE_SYSTEM_PROCESSOR arm64)
    set(ARCH "aarch64")
  else ()
    message(FATAL_ERROR "ARCH must be x86_64 or aarch64")
  endif ()
endif ()
if (USE_CLANG)
  set(CMAKE_C_COMPILER ${CLANG})
  set(CMAKE_CXX_COMPILER ${CLANG})
  set(CMAKE_ASM_COMPILER ${CLANG})
  #    set(CMAKE_LINKER ${CLANG_LD})
  #    set(CMAKE_CXX_COMPILER_LINKER ${CLANG_LD})
  set(CMAKE_LINKER_TYPE LLD)
  set(CMAKE_CXX_USING_LINKER_LLD "-fuse-ld=lld")
  set(CMAKE_CXX_USING_LINKER_MODE FLAG)
  if (NOT TEST_MODE)
    set(CMAKE_C_COMPILER_TARGET "${ARCH}-elf")
    set(CMAKE_CXX_COMPILER_TARGET "${ARCH}-elf")
    set(CMAKE_ASM_COMPILER_TARGET "${ARCH}-elf")
  endif ()
elseif (NOT TEST_MODE)
  set(CMAKE_C_COMPILER "${ARCH}-elf-gcc")
  set(CMAKE_CXX_COMPILER "${ARCH}-elf-g++")
  set(CMAKE_ASM_COMPILER "${ARCH}-elf-as")
  set(CMAKE_LINKER "${ARCH}-elf-ld")
endif ()
project(dvnetos VERSION 0.1.0 LANGUAGES C CXX ASM)
if (TEST_MODE)
  enable_testing()
  set(ARCH ${CMAKE_HOST_SYSTEM_PROCESSOR})
  handleArchAlias(ARCH)
endif ()
message(STATUS "ARCH: ${ARCH} USE_CLANG: ${USE_CLANG}")

set(CMAKE_C_STANDARD 11)
include(utils)

set(KERNEL_C_FLAGS)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (TEST_MODE)
  include(FetchContent)
  FetchContent_Declare(
      googletest
      URL https://github.com/google/googletest/archive/refs/tags/v1.15.2.tar.gz
      EXCLUDE_FROM_ALL
      FIND_PACKAGE_ARGS NAMES GTest
  )
  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
  set(gtest_disable_pthreads ON CACHE BOOL "" FORCE)
  FetchContent_MakeAvailable(googletest)
  include(GoogleTest)
endif ()
add_compile_options_if_supported(CXX -ffreestanding KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -nostdlib KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -nostartfiles KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -nostdinc KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -nostdinc++ KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-sse KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-sse2 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-sse3 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-ssse3 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-sse4.1 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-sse4.2 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-avx KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-avx2 KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-mmx KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mno-3dnow KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -mcmodel=kernel KERNEL_CXX_FLAGS)
add_compile_options_if_supported(CXX -Wall LOCAL_CXX_FLAGS)
add_compile_options_if_supported(CXX -pedantic LOCAL_CXX_FLAGS)
add_compile_options_if_supported(CXX -pipe LOCAL_CXX_FLAGS)
#add_compile_options_if_supported(CXX -O LOCAL_CXX_FLAGS)
add_compile_options_if_supported(CXX -Werror LOCAL_CXX_FLAGS)
string(JOIN " " CMAKE_CXX_FLAGS ${LOCAL_CXX_FLAGS})

#add_linker_options_if_supported(CXX -nostartfiles KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -nostdlib KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -nodefaultlibs KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -ffreestanding KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -Wl,-Map=output.map KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -mcmodel=kernel KERNEL_LINKER_OPTIONS)
add_compile_options_if_supported(CXX -Werror KERNEL_LINKER_OPTIONS)

if (TEST_MODE)
  add_linker_options_if_supported(CXX -fprofile-instr-generate COVERAGE_LINKER_OPTIONS)
  add_linker_options_if_supported(CXX -fcoverage-mapping COVERAGE_LINKER_OPTIONS)
  cmake_push_check_state()
  set(CMAKE_REQUIRED_LINK_OPTIONS ${COVERAGE_LINKER_OPTIONS})
  add_compile_options_if_supported(CXX -fprofile-instr-generate COVERAGE_CXX_FLAGS)
  add_compile_options_if_supported(CXX -fcoverage-mapping COVERAGE_CXX_FLAGS)
  cmake_pop_check_state()
endif ()

add_subdirectory(tools)
add_subdirectory(kernel)
add_subdirectory(image)

cmake_print_variables(CMAKE_SYSTEM_NAME CMAKE_SYSTEM_PROCESSOR CMAKE_OBJCOPY CMAKE_C_COMPILER CMAKE_CXX_COMPILER CMAKE_ASM_COMPILER CMAKE_LINKER CMAKE_C_FLAGS CMAKE_CXX_FLAGS CMAKE_ASM_FLAGS CMAKE_LINKER_FLAGS KERNEL_CXX_FLAGS KERNEL_LINKER_OPTIONS)
getAllTargets(all_targets)
cmake_print_properties(TARGETS ${all_targets} PROPERTIES TYPE SOURCES SOURCE_DIR INCLUDE_DIRECTORIES LINK_DEPENDS LINK_OPTIONS COMPILE_OPTIONS)
